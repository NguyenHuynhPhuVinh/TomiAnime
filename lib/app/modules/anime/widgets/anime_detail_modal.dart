import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:iconsax/iconsax.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../../../theme/app_colors.dart';
import '../../../theme/app_text_styles.dart';
import '../../../models/anime_model.dart';
import '../../../services/streaming_data_service.dart';
import '../../../services/firestore_service.dart';
import '../../../services/auth_service.dart';
import '../../../models/anime_watch_status_model.dart';
import '../../../utils/notification_helper.dart';
import '../utils/anime_utils.dart';

class AnimeDetailModal {
  static void show(AnimeModel anime) {
    // Debug log khi m·ªü anime detail
    print('üé¨ Opening anime detail:');
    print('   üìã MAL ID: ${anime.malId}');
    print('   üè∑Ô∏è  Title: ${anime.title}');
    print('   üåê English: ${anime.titleEnglish ?? 'N/A'}');
    print('   üáØüáµ Japanese: ${anime.titleJapanese ?? 'N/A'}');
    print('   üì∫ Type: ${anime.type}');
    print('   ‚≠ê Score: ${anime.score ?? 'N/A'}');

    // Ki·ªÉm tra streaming availability
    final streamingService = StreamingDataService();
    final isAvailable = streamingService.isAnimeAvailable(anime.malId);
    final nguoncUrl = streamingService.getNguoncUrl(anime.malId);

    print('   üé• Streaming available: $isAvailable');
    if (isAvailable && nguoncUrl != null) {
      print('   üîó Nguonc URL: $nguoncUrl');
    }
    print('   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');

    showModalBottomSheet(
      context: Get.context!,
      backgroundColor: Colors.transparent,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20.r)),
      ),
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.9,
        minChildSize: 0.5,
        builder: (context, scrollController) => _AnimeDetailContent(
          anime: anime,
          scrollController: scrollController,
        ),
      ),
    );
  }
}

class _AnimeDetailContent extends StatefulWidget {
  final AnimeModel anime;
  final ScrollController scrollController;

  const _AnimeDetailContent({
    Key? key,
    required this.anime,
    required this.scrollController,
  }) : super(key: key);

  @override
  State<_AnimeDetailContent> createState() => _AnimeDetailContentState();
}

class _AnimeDetailContentState extends State<_AnimeDetailContent> {
  final Rxn<AnimeWatchStatusModel> watchStatus = Rxn<AnimeWatchStatusModel>();
  final RxBool isLoadingStatus = false.obs;

  @override
  void initState() {
    super.initState();
    _loadWatchStatus();
  }

  /// T·∫£i tr·∫°ng th√°i xem anime
  Future<void> _loadWatchStatus() async {
    final authService = AuthService.instance;
    final user = authService.currentUser!; // User ƒë√£ ƒëƒÉng nh·∫≠p r·ªìi

    final firestoreService = FirestoreService.instance;
    final status = await firestoreService.getAnimeWatchStatus(
      user.uid,
      widget.anime.malId,
    );
    watchStatus.value = status;
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: AppColors.surface,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20.r)),
      ),
      padding: EdgeInsets.all(20.r),
      child: SingleChildScrollView(
        controller: widget.scrollController,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Handle bar
            Center(
              child: Container(
                width: 40.w,
                height: 4.h,
                decoration: BoxDecoration(
                  color: AppColors.textSecondary.withOpacity(0.3),
                  borderRadius: BorderRadius.circular(2.r),
                ),
              ),
            ),
            SizedBox(height: 20.h),
            // Anime info
            Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Poster
                Container(
                  width: 120.w,
                  height: 160.h,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(12.r),
                  ),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(12.r),
                    child: CachedNetworkImage(
                      imageUrl: widget.anime.images.jpg ?? '',
                      fit: BoxFit.cover,
                      placeholder: (context, url) =>
                          AnimeUtils.buildImagePlaceholder(),
                      errorWidget: (context, url, error) =>
                          AnimeUtils.buildImageError(),
                    ),
                  ),
                ),
                SizedBox(width: 16.w),
                // Info
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        widget.anime.title,
                        style: AppTextStyles.h4.copyWith(
                          color: AppColors.textPrimary,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      if (widget.anime.titleEnglish != null) ...[
                        SizedBox(height: 4.h),
                        Text(
                          widget.anime.titleEnglish!,
                          style: AppTextStyles.bodyMedium.copyWith(
                            color: AppColors.textSecondary,
                          ),
                        ),
                      ],
                      SizedBox(height: 12.h),
                      if (widget.anime.score != null) ...[
                        Row(
                          children: [
                            Icon(
                              Iconsax.star1,
                              color: Colors.amber,
                              size: 16.r,
                            ),
                            SizedBox(width: 4.w),
                            Text(
                              '${widget.anime.score}/10',
                              style: AppTextStyles.bodyMedium.copyWith(
                                color: AppColors.textPrimary,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                            if (widget.anime.scoredBy != null) ...[
                              Text(
                                ' (${AnimeUtils.formatNumber(widget.anime.scoredBy!)} votes)',
                                style: AppTextStyles.bodySmall.copyWith(
                                  color: AppColors.textSecondary,
                                ),
                              ),
                            ],
                          ],
                        ),
                        SizedBox(height: 8.h),
                      ],
                      AnimeUtils.buildInfoRow('Lo·∫°i', widget.anime.type),
                      if (widget.anime.episodes != null)
                        AnimeUtils.buildInfoRow(
                          'S·ªë t·∫≠p',
                          '${widget.anime.episodes}',
                        ),
                      AnimeUtils.buildInfoRow(
                        'Tr·∫°ng th√°i',
                        widget.anime.status,
                      ),
                      if (widget.anime.aired != null)
                        AnimeUtils.buildInfoRow(
                          'Ph√°t s√≥ng',
                          widget.anime.aired!,
                        ),
                    ],
                  ),
                ),
              ],
            ),
            if (widget.anime.genres.isNotEmpty) ...[
              SizedBox(height: 20.h),
              Text(
                'Th·ªÉ lo·∫°i',
                style: AppTextStyles.h5.copyWith(
                  color: AppColors.textPrimary,
                  fontWeight: FontWeight.bold,
                ),
              ),
              SizedBox(height: 8.h),
              Wrap(
                spacing: 8.w,
                runSpacing: 8.h,
                children: widget.anime.genres
                    .map(
                      (genre) => Container(
                        padding: EdgeInsets.symmetric(
                          horizontal: 12.w,
                          vertical: 6.h,
                        ),
                        decoration: BoxDecoration(
                          color: AppColors.animeTheme.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(16.r),
                          border: Border.all(
                            color: AppColors.animeTheme.withOpacity(0.3),
                          ),
                        ),
                        child: Text(
                          genre,
                          style: AppTextStyles.bodySmall.copyWith(
                            color: AppColors.animeTheme,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                    )
                    .toList(),
              ),
            ],
            // Hi·ªÉn th·ªã t√≥m t·∫Øt ch·ªâ khi anime kh√¥ng c√≥ n√∫t xem
            _buildSynopsisSection(),
            // N√∫t xem anime v√† l∆∞u anime
            _buildActionButtons(),
            SizedBox(height: 20.h),
          ],
        ),
      ),
    );
  }

  /// Widget hi·ªÉn th·ªã t√≥m t·∫Øt (ch·ªâ khi anime kh√¥ng c√≥ n√∫t xem)
  Widget _buildSynopsisSection() {
    final streamingService = StreamingDataService();
    final isAvailable = streamingService.isAnimeAvailable(widget.anime.malId);

    // Ch·ªâ hi·ªÉn th·ªã t√≥m t·∫Øt khi anime kh√¥ng c√≥ n√∫t xem
    if (isAvailable || widget.anime.synopsis == null) {
      return const SizedBox.shrink();
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SizedBox(height: 20.h),
        Text(
          'T√≥m t·∫Øt',
          style: AppTextStyles.h5.copyWith(
            color: AppColors.textPrimary,
            fontWeight: FontWeight.bold,
          ),
        ),
        SizedBox(height: 8.h),
        Text(
          widget.anime.synopsis!,
          style: AppTextStyles.bodyMedium.copyWith(
            color: AppColors.textSecondary,
            height: 1.5,
          ),
        ),
      ],
    );
  }

  /// Widget hi·ªÉn th·ªã c√°c n√∫t h√†nh ƒë·ªông
  Widget _buildActionButtons() {
    final streamingService = StreamingDataService();
    final isAvailable = streamingService.isAnimeAvailable(widget.anime.malId);

    return Container(
      margin: EdgeInsets.only(top: 20.h),
      child: Column(
        children: [
          // N√∫t xem anime (n·∫øu c√≥)
          if (isAvailable) ...[
            _buildWatchButton(),
            SizedBox(height: 12.h),
            // N√∫t l∆∞u anime (ch·ªâ hi·ªÉn th·ªã khi c√≥ n√∫t xem)
            _buildSaveButton(),
          ],
        ],
      ),
    );
  }

  /// Widget n√∫t xem anime
  Widget _buildWatchButton() {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton.icon(
        onPressed: _onWatchPressed,
        icon: Icon(Iconsax.play, color: Colors.white, size: 20.r),
        label: Text(
          'Xem Anime',
          style: AppTextStyles.bodyMedium.copyWith(
            color: Colors.white,
            fontWeight: FontWeight.w600,
          ),
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: AppColors.animeTheme,
          foregroundColor: Colors.white,
          padding: EdgeInsets.symmetric(vertical: 16.h),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.r),
          ),
          elevation: 2,
        ),
      ),
    );
  }

  /// Widget n√∫t l∆∞u anime (ƒë∆°n gi·∫£n ch·ªâ hi·ªÉn th·ªã ƒë√£ l∆∞u/ch∆∞a l∆∞u)
  Widget _buildSaveButton() {
    return Obx(() {
      final isAnimeInList = watchStatus.value != null;

      return SizedBox(
        width: double.infinity,
        child: ElevatedButton.icon(
          onPressed: isAnimeInList
              ? null // Kh√¥ng cho ph√©p b·ªè l∆∞u t·ª´ detail modal
              : (isLoadingStatus.value ? null : _onSavePressed),
          icon: isLoadingStatus.value
              ? SizedBox(
                  width: 20.r,
                  height: 20.r,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                  ),
                )
              : Icon(
                  isAnimeInList ? Iconsax.heart5 : Iconsax.heart,
                  color: Colors.white,
                  size: 20.r,
                ),
          label: Text(
            isAnimeInList ? 'ƒê√£ l∆∞u' : 'L∆∞u Anime',
            style: AppTextStyles.bodyMedium.copyWith(
              color: Colors.white,
              fontWeight: FontWeight.w600,
            ),
          ),
          style: ElevatedButton.styleFrom(
            backgroundColor: isAnimeInList
                ? AppColors.success.withOpacity(0.8)
                : AppColors.animeTheme.withOpacity(0.8),
            foregroundColor: Colors.white,
            padding: EdgeInsets.symmetric(vertical: 16.h),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12.r),
            ),
            elevation: 1,
            disabledBackgroundColor: AppColors.success.withOpacity(0.6),
            disabledForegroundColor: Colors.white,
          ),
        ),
      );
    });
  }

  /// X·ª≠ l√Ω khi nh·∫•n n√∫t xem
  Future<void> _onWatchPressed() async {
    final streamingService = StreamingDataService();
    final nguoncUrl = streamingService.getNguoncUrl(widget.anime.malId);

    if (nguoncUrl != null) {
      // T·ª± ƒë·ªông t·∫°o watch status n·∫øu ch∆∞a c√≥
      await _ensureWatchStatusExists();

      // Log ƒë·ªÉ debug
      print('üé¨ Navigating to watch screen:');
      print('   üìã MAL ID: ${widget.anime.malId}');
      print('   üè∑Ô∏è  Title: ${widget.anime.title}');
      print('   üîó Nguonc URL: $nguoncUrl');

      // ƒê√≥ng modal tr∆∞·ªõc khi navigate
      Get.back();

      // Navigate ƒë·∫øn anime watch screen
      Get.toNamed(
        '/anime-watch',
        arguments: {
          'nguoncUrl': nguoncUrl,
          'animeTitle': widget.anime.title,
          'malId': widget.anime.malId,
        },
      );
    } else {
      NotificationHelper.showError(
        title: 'L·ªói',
        message: 'Kh√¥ng t√¨m th·∫•y link xem cho anime n√†y',
        duration: const Duration(seconds: 2),
      );
    }
  }

  /// ƒê·∫£m b·∫£o watch status t·ªìn t·∫°i tr∆∞·ªõc khi xem
  Future<void> _ensureWatchStatusExists() async {
    if (watchStatus.value == null) {
      final authService = AuthService.instance;
      final user = authService.currentUser!;
      final firestoreService = FirestoreService.instance;

      final newWatchStatus = AnimeWatchStatusModel.fromAnimeModel(widget.anime);
      await firestoreService.saveAnimeWatchStatus(user.uid, newWatchStatus);
      watchStatus.value = newWatchStatus;

      print('‚úÖ Auto-created watch status for ${widget.anime.title}');
    }
  }

  /// X·ª≠ l√Ω khi nh·∫•n n√∫t l∆∞u anime
  Future<void> _onSavePressed() async {
    final authService = AuthService.instance;
    final user = authService.currentUser!; // User ƒë√£ ƒëƒÉng nh·∫≠p r·ªìi

    isLoadingStatus.value = true;

    try {
      final firestoreService = FirestoreService.instance;

      // Ch·ªâ x·ª≠ l√Ω khi ch∆∞a l∆∞u
      if (watchStatus.value != null) {
        // ƒê√£ l∆∞u r·ªìi, kh√¥ng l√†m g√¨
        isLoadingStatus.value = false;
        return;
      }

      // Th√™m v√†o danh s√°ch v·ªõi tr·∫°ng th√°i "ƒê√£ l∆∞u"
      final newWatchStatus = AnimeWatchStatusModel.fromAnimeModel(widget.anime);
      final success = await firestoreService.saveAnimeWatchStatus(
        user.uid,
        newWatchStatus,
      );

      if (success) {
        watchStatus.value = newWatchStatus;
        NotificationHelper.showSuccess(
          title: 'ƒê√£ l∆∞u',
          message: 'ƒê√£ l∆∞u ${widget.anime.title} v√†o danh s√°ch\nV√†o "Anime c·ªßa t√¥i" ƒë·ªÉ qu·∫£n l√Ω',
          duration: const Duration(seconds: 3),
        );
      } else {
        NotificationHelper.showError(
          title: 'L·ªói',
          message: 'Kh√¥ng th·ªÉ l∆∞u anime. Vui l√≤ng th·ª≠ l·∫°i.',
          duration: const Duration(seconds: 2),
        );
      }
    } catch (e) {
      print('‚ùå Error saving/removing anime: $e');
      NotificationHelper.showError(
        title: 'L·ªói',
        message: 'ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.',
        duration: const Duration(seconds: 2),
      );
    } finally {
      isLoadingStatus.value = false;
    }
  }
}
