import 'dart:convert';
import 'dart:io';
import 'package:dio/dio.dart';
import 'package:hive/hive.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:device_info_plus/device_info_plus.dart';
import '../models/app_update_model.dart';

class AppUpdateService {
  static const String _boxName = 'app_update';
  static const String _lastCheckKey = 'last_check_time';
  
  // URL c·ªßa JSON file update tr√™n GitHub - c·∫≠p nh·∫≠t URL n√†y
  static const String updateJsonUrl = 'https://raw.githubusercontent.com/NguyenHuynhPhuVinh/TomiAnimeData/refs/heads/main/app_update.json';
  
  late final Box _box;
  final Dio _dio = Dio();
  
  // Singleton pattern
  static final AppUpdateService _instance = AppUpdateService._internal();
  factory AppUpdateService() => _instance;
  AppUpdateService._internal();
  
  /// Kh·ªüi t·∫°o service
  Future<void> init() async {
    try {
      _box = await Hive.openBox(_boxName);

      // X√≥a c√°c APK c≈© khi kh·ªüi t·∫°o
      await cleanupOldApks();

      print('AppUpdateService initialized successfully');
    } catch (e) {
      print('Error initializing AppUpdateService: $e');
      rethrow;
    }
  }
  
  /// Ki·ªÉm tra c·∫≠p nh·∫≠t t·ª´ GitHub
  Future<AppUpdateModel?> checkForUpdate() async {
    try {
      print('üîç Checking for app updates...');
      
      // L·∫•y th√¥ng tin app hi·ªán t·∫°i
      final packageInfo = await PackageInfo.fromPlatform();
      final currentVersion = packageInfo.version;
      
      print('üì± Current app version: $currentVersion');
      
      // T·∫£i th√¥ng tin update t·ª´ GitHub
      final response = await _dio.get(updateJsonUrl);
      
      if (response.statusCode == 200) {
        final jsonData = response.data is String 
          ? json.decode(response.data) 
          : response.data;
          
        final updateInfo = AppUpdateModel.fromJson(jsonData);
        
        print('üÜï Latest version available: ${updateInfo.version}');
        print('üì¶ Download URL: ${updateInfo.downloadUrl}');
        print('üîÑ Force update: ${updateInfo.forceUpdate}');
        
        // So s√°nh version
        if (updateInfo.isNewerThan(currentVersion)) {
          print('‚úÖ New update available!');
          await _saveLastCheckTime();
          return updateInfo;
        } else {
          print('‚ÑπÔ∏è App is up to date');
          await _saveLastCheckTime();
          return null;
        }
      } else {
        throw Exception('Failed to fetch update info: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå Error checking for updates: $e');
      return null;
    }
  }
  
  /// T·∫£i v√† c√†i ƒë·∫∑t APK
  Future<bool> downloadAndInstallApk(AppUpdateModel updateInfo) async {
    try {
      print('üì• Starting APK download...');
      
      // Ki·ªÉm tra quy·ªÅn
      if (!await _requestPermissions()) {
        print('‚ùå Permissions denied');
        return false;
      }
      
      // L·∫•y th∆∞ m·ª•c download
      final directory = await getExternalStorageDirectory();
      if (directory == null) {
        print('‚ùå Cannot access external storage');
        return false;
      }
      
      final downloadPath = '${directory.path}/TomiAnime_${updateInfo.version}.apk';
      
      // X√≥a file c≈© n·∫øu c√≥
      final file = File(downloadPath);
      if (await file.exists()) {
        await file.delete();
      }
      
      // T·∫£i APK
      await _dio.download(
        updateInfo.downloadUrl,
        downloadPath,
        onReceiveProgress: (received, total) {
          if (total != -1) {
            final progress = (received / total * 100).toStringAsFixed(1);
            print('üì• Download progress: $progress%');
          }
        },
      );
      
      print('‚úÖ APK downloaded successfully: $downloadPath');
      
      // M·ªü file ƒë·ªÉ c√†i ƒë·∫∑t
      final result = await OpenFile.open(downloadPath);

      if (result.type == ResultType.done) {
        print('‚úÖ APK installation started');

        // T·ª± ƒë·ªông x√≥a APK sau khi m·ªü ƒë·ªÉ c√†i ƒë·∫∑t
        _scheduleApkCleanup(downloadPath);

        return true;
      } else {
        print('‚ùå Failed to open APK: ${result.message}');

        // X√≥a APK n·∫øu kh√¥ng th·ªÉ m·ªü
        await _deleteApkFile(downloadPath);

        return false;
      }
      
    } catch (e) {
      print('‚ùå Error downloading/installing APK: $e');
      return false;
    }
  }
  
  /// Ki·ªÉm tra quy·ªÅn c·∫ßn thi·∫øt
  Future<bool> _requestPermissions() async {
    try {
      if (Platform.isAndroid) {
        final deviceInfo = DeviceInfoPlugin();
        final androidInfo = await deviceInfo.androidInfo;

        // Android 13+ (API 33+) kh√¥ng c·∫ßn WRITE_EXTERNAL_STORAGE
        if (androidInfo.version.sdkInt >= 33) {
          // Ch·ªâ c·∫ßn quy·ªÅn install packages
          final installPermission = await Permission.requestInstallPackages.request();
          print('Install permission: ${installPermission.isGranted}');
          return installPermission.isGranted;
        } else {
          // Android 12 v√† th·∫•p h∆°n c·∫ßn storage permission
          final installPermission = await Permission.requestInstallPackages.request();
          final storagePermission = await Permission.storage.request();

          print('Install permission: ${installPermission.isGranted}');
          print('Storage permission: ${storagePermission.isGranted}');

          return installPermission.isGranted && storagePermission.isGranted;
        }
      }

      return true;
    } catch (e) {
      print('Error requesting permissions: $e');
      return false;
    }
  }
  
  /// L∆∞u th·ªùi gian check cu·ªëi
  Future<void> _saveLastCheckTime() async {
    try {
      await _box.put(_lastCheckKey, DateTime.now().toIso8601String());
    } catch (e) {
      print('Error saving last check time: $e');
    }
  }
  
  /// L·∫•y th·ªùi gian check cu·ªëi
  DateTime? getLastCheckTime() {
    try {
      final timeString = _box.get(_lastCheckKey);
      if (timeString == null) return null;
      return DateTime.tryParse(timeString);
    } catch (e) {
      print('Error getting last check time: $e');
      return null;
    }
  }
  
  /// Ki·ªÉm tra xem c√≥ n√™n check update kh√¥ng (d·ª±a tr√™n th·ªùi gian)
  bool shouldCheckForUpdate({Duration maxAge = const Duration(hours: 24)}) {
    final lastCheck = getLastCheckTime();
    if (lastCheck == null) return true;
    
    return DateTime.now().difference(lastCheck) > maxAge;
  }
  
  /// L·∫•y th√¥ng tin app hi·ªán t·∫°i
  Future<Map<String, String>> getCurrentAppInfo() async {
    try {
      final packageInfo = await PackageInfo.fromPlatform();
      return {
        'version': packageInfo.version,
        'buildNumber': packageInfo.buildNumber,
        'packageName': packageInfo.packageName,
        'appName': packageInfo.appName,
      };
    } catch (e) {
      print('Error getting app info: $e');
      return {};
    }
  }

  /// L√™n l·ªãch x√≥a APK sau khi c√†i ƒë·∫∑t
  void _scheduleApkCleanup(String apkPath) {
    // ƒê·ª£i 30 gi√¢y sau khi m·ªü APK ƒë·ªÉ user c√≥ th·ªùi gian c√†i ƒë·∫∑t
    Future.delayed(const Duration(seconds: 30), () async {
      await _deleteApkFile(apkPath);
    });
  }

  /// X√≥a file APK
  Future<void> _deleteApkFile(String apkPath) async {
    try {
      final file = File(apkPath);
      if (await file.exists()) {
        await file.delete();
        print('üóëÔ∏è APK file deleted: $apkPath');
      }
    } catch (e) {
      print('‚ùå Error deleting APK file: $e');
    }
  }

  /// X√≥a t·∫•t c·∫£ APK c≈© trong th∆∞ m·ª•c download
  Future<void> cleanupOldApks() async {
    try {
      final directory = await getExternalStorageDirectory();
      if (directory == null) return;

      final files = directory.listSync();
      for (final file in files) {
        if (file.path.endsWith('.apk') && file.path.contains('TomiAnime')) {
          try {
            await file.delete();
            print('üóëÔ∏è Deleted old APK: ${file.path}');
          } catch (e) {
            print('‚ùå Error deleting ${file.path}: $e');
          }
        }
      }
    } catch (e) {
      print('‚ùå Error cleaning up old APKs: $e');
    }
  }
}
