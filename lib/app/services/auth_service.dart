import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:get/get.dart';
import '../models/user_model.dart';
import 'firestore_service.dart';

class AuthService extends GetxService {
  static AuthService get instance => Get.find();

  final FirebaseAuth _auth = FirebaseAuth.instance;
  final GoogleSignIn _googleSignIn = GoogleSignIn();
  final FirestoreService _firestoreService = FirestoreService.instance;
  
  // Observable user state
  Rxn<User> user = Rxn<User>();
  
  @override
  void onInit() {
    super.onInit();
    // Listen to auth state changes
    user.bindStream(_auth.authStateChanges());
  }
  
  // Check if user is logged in
  bool get isLoggedIn => user.value != null;
  
  // Get current user
  User? get currentUser => user.value;
  
  // Sign in with email and password
  Future<UserCredential?> signInWithEmailAndPassword({
    required String email,
    required String password,
  }) async {
    try {
      final credential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      // Save user to Firestore
      if (credential.user != null) {
        await _saveUserToFirestore(credential.user!);
      }

      return credential;
    } on FirebaseAuthException catch (e) {
      _handleAuthError(e);
      return null;
    } catch (e) {
      Get.snackbar(
        'L·ªói',
        'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: $e',
        snackPosition: SnackPosition.BOTTOM,
      );
      return null;
    }
  }
  
  // Sign up with email and password
  Future<UserCredential?> signUpWithEmailAndPassword({
    required String email,
    required String password,
  }) async {
    try {
      final credential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      // Save user to Firestore
      if (credential.user != null) {
        await _saveUserToFirestore(credential.user!);
      }

      return credential;
    } on FirebaseAuthException catch (e) {
      _handleAuthError(e);
      return null;
    } catch (e) {
      Get.snackbar(
        'L·ªói',
        'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: $e',
        snackPosition: SnackPosition.BOTTOM,
      );
      return null;
    }
  }
  
  // Sign in with Google
  Future<UserCredential?> signInWithGoogle() async {
    try {
      print('üîç Starting Google Sign-In...');
      // Trigger the authentication flow
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
      print('üîç Google user: $googleUser');
      
      if (googleUser == null) {
        // User canceled the sign-in
        print('üîç User canceled Google Sign-In');
        return null;
      }
      
      // Obtain the auth details from the request
      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;
      
      // Create a new credential
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );
      
      // Sign in to Firebase with the Google credential
      print('üîç Signing in to Firebase...');
      final result = await _auth.signInWithCredential(credential);
      print('üîç Firebase sign-in successful: ${result.user?.email}');

      // Save user to Firestore
      if (result.user != null) {
        await _saveUserToFirestore(result.user!);
      }

      return result;
    } catch (e) {
      print('üîç Google Sign-In error: $e');
      Get.snackbar(
        'L·ªói',
        'ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i: $e',
        snackPosition: SnackPosition.BOTTOM,
      );
      return null;
    }
  }
  
  // Sign out
  Future<void> signOut() async {
    try {
      await Future.wait([
        _auth.signOut(),
        _googleSignIn.signOut(),
      ]);
    } catch (e) {
      Get.snackbar(
        'L·ªói',
        'ƒêƒÉng xu·∫•t th·∫•t b·∫°i: $e',
        snackPosition: SnackPosition.BOTTOM,
      );
    }
  }
  
  // Reset password
  Future<bool> resetPassword(String email) async {
    try {
      await _auth.sendPasswordResetEmail(email: email);
      Get.snackbar(
        'Th√†nh c√¥ng',
        'Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i',
        snackPosition: SnackPosition.BOTTOM,
      );
      return true;
    } on FirebaseAuthException catch (e) {
      _handleAuthError(e);
      return false;
    } catch (e) {
      Get.snackbar(
        'L·ªói',
        'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: $e',
        snackPosition: SnackPosition.BOTTOM,
      );
      return false;
    }
  }
  
  // Handle Firebase Auth errors
  void _handleAuthError(FirebaseAuthException e) {
    String message;
    switch (e.code) {
      case 'user-not-found':
        message = 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y';
        break;
      case 'wrong-password':
        message = 'M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c';
        break;
      case 'email-already-in-use':
        message = 'Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng';
        break;
      case 'weak-password':
        message = 'M·∫≠t kh·∫©u qu√° y·∫øu';
        break;
      case 'invalid-email':
        message = 'Email kh√¥ng h·ª£p l·ªá';
        break;
      case 'user-disabled':
        message = 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a';
        break;
      case 'too-many-requests':
        message = 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau';
        break;
      case 'operation-not-allowed':
        message = 'Ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p n√†y kh√¥ng ƒë∆∞·ª£c ph√©p';
        break;
      default:
        message = 'ƒê√£ x·∫£y ra l·ªói: ${e.message}';
    }
    
    Get.snackbar(
      'L·ªói ƒëƒÉng nh·∫≠p',
      message,
      snackPosition: SnackPosition.BOTTOM,
    );
  }

  // Save user to Firestore (ch·ªâ t·∫°o m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i)
  Future<void> _saveUserToFirestore(User user) async {
    try {
      final userModel = UserModel.fromFirebaseUser(
        user.uid,
        user.email ?? '',
        user.displayName,
      );

      await _firestoreService.saveUserIfNotExists(userModel);
    } catch (e) {
      print('‚ùå Error saving user to Firestore: $e');
    }
  }
}
