import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:get/get.dart';
import '../models/user_model.dart';
import '../models/anime_watch_status_model.dart';

class FirestoreService extends GetxService {
  static FirestoreService get instance => Get.find();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// L∆∞u th√¥ng tin user
  Future<bool> saveUser(UserModel user) async {
    try {
      await _firestore
          .collection('users')
          .doc(user.uid)
          .set(user.toMap(), SetOptions(merge: true));

      print('‚úÖ User saved: ${user.email}');
      return true;
    } catch (e) {
      print('‚ùå Error saving user: $e');
      return false;
    }
  }

  /// L∆∞u ho·∫∑c c·∫≠p nh·∫≠t th√¥ng tin user (ch·ªâ c·∫≠p nh·∫≠t khi user ch∆∞a t·ªìn t·∫°i)
  Future<bool> saveUserIfNotExists(UserModel user) async {
    try {
      final existingUser = await getUser(user.uid);

      if (existingUser == null) {
        // User ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
        await _firestore.collection('users').doc(user.uid).set(user.toMap());
        print('‚úÖ New user created: ${user.email}');
      }
      return true;
    } catch (e) {
      print('‚ùå Error saving user: $e');
      return false;
    }
  }

  /// L·∫•y th√¥ng tin user
  Future<UserModel?> getUser(String uid) async {
    try {
      final doc = await _firestore.collection('users').doc(uid).get();

      if (doc.exists) {
        return UserModel.fromFirestore(doc);
      }
      return null;
    } catch (e) {
      print('‚ùå Error getting user: $e');
      return null;
    }
  }

  /// T√¨m user theo email
  Future<UserModel?> getUserByEmail(String email) async {
    try {
      final querySnapshot = await _firestore
          .collection('users')
          .where('email', isEqualTo: email)
          .limit(1)
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        return UserModel.fromFirestore(querySnapshot.docs.first);
      }
      return null;
    } catch (e) {
      print('‚ùå Error getting user by email: $e');
      return null;
    }
  }

  /// C·∫≠p nh·∫≠t th√¥ng tin user
  Future<bool> updateUser(String uid, {String? displayName, String? avatarUrl}) async {
    try {
      final updateData = <String, dynamic>{};

      if (displayName != null) {
        updateData['displayName'] = displayName;
      }

      if (avatarUrl != null) {
        updateData['avatarUrl'] = avatarUrl;
      }

      print('üîÑ Update data: $updateData');

      if (updateData.isNotEmpty) {
        await _firestore
            .collection('users')
            .doc(uid)
            .update(updateData);

        print('‚úÖ User updated successfully');
        return true;
      }

      print('‚ö†Ô∏è No data to update');
      return true; // Tr·∫£ v·ªÅ true v√¨ kh√¥ng c√≥ l·ªói, ch·ªâ l√† kh√¥ng c√≥ g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t
    } catch (e) {
      print('‚ùå Error updating user: $e');
      return false;
    }
  }



  // ==================== ANIME WATCH STATUS METHODS ====================

  /// L∆∞u ho·∫∑c c·∫≠p nh·∫≠t tr·∫°ng th√°i xem anime
  Future<bool> saveAnimeWatchStatus(String uid, AnimeWatchStatusModel watchStatus) async {
    try {
      await _firestore
          .collection('users')
          .doc(uid)
          .collection('animeWatchStatus')
          .doc(watchStatus.malId.toString())
          .set(watchStatus.toFirestore(), SetOptions(merge: true));

      print('‚úÖ Anime watch status saved: ${watchStatus.title} (Status: ${watchStatus.status.displayName})');
      return true;
    } catch (e) {
      print('‚ùå Error saving anime watch status: $e');
      return false;
    }
  }

  /// L·∫•y tr·∫°ng th√°i xem anime
  Future<AnimeWatchStatusModel?> getAnimeWatchStatus(String uid, int malId) async {
    try {
      final doc = await _firestore
          .collection('users')
          .doc(uid)
          .collection('animeWatchStatus')
          .doc(malId.toString())
          .get();

      if (doc.exists) {
        return AnimeWatchStatusModel.fromFirestore(doc);
      }
      return null;
    } catch (e) {
      print('‚ùå Error getting anime watch status: $e');
      return null;
    }
  }

  /// ƒê√°nh d·∫•u t·∫≠p anime ƒë√£ xem
  Future<bool> markEpisodeWatched(String uid, int malId, int episodeIndex, {int? totalEpisodes}) async {
    try {
      final docRef = _firestore
          .collection('users')
          .doc(uid)
          .collection('animeWatchStatus')
          .doc(malId.toString());

      final doc = await docRef.get();

      if (!doc.exists) {
        print('‚ùå Anime watch status not found for MAL ID: $malId');
        return false;
      }

      final currentStatus = AnimeWatchStatusModel.fromFirestore(doc);
      final updatedWatchedEpisodes = List<int>.from(currentStatus.watchedEpisodes);

      // Th√™m t·∫≠p v√†o danh s√°ch ƒë√£ xem n·∫øu ch∆∞a c√≥
      if (!updatedWatchedEpisodes.contains(episodeIndex)) {
        updatedWatchedEpisodes.add(episodeIndex);
        updatedWatchedEpisodes.sort(); // S·∫Øp x·∫øp theo th·ª© t·ª±
      }

      // X√°c ƒë·ªãnh tr·∫°ng th√°i m·ªõi
      AnimeWatchStatus newStatus;
      // Ch·ªâ s·ª≠ d·ª•ng totalEpisodes t·ª´ currentStatus (data detail g·ªëc), kh√¥ng d√πng t·ª´ nguonc API
      final totalEps = currentStatus.totalEpisodes;

      if (totalEps != null && totalEps > 0 && updatedWatchedEpisodes.length >= totalEps) {
        newStatus = AnimeWatchStatus.completed;
      } else if (updatedWatchedEpisodes.isNotEmpty) {
        newStatus = AnimeWatchStatus.watching;
      } else {
        newStatus = AnimeWatchStatus.saved;
      }

      // C·∫≠p nh·∫≠t document - KH√îNG c·∫≠p nh·∫≠t totalEpisodes, gi·ªØ nguy√™n t·ª´ data detail
      await docRef.update({
        'status': newStatus.value,
        'currentEpisode': episodeIndex,
        'watchedEpisodes': updatedWatchedEpisodes,
        'lastWatchedAt': FieldValue.serverTimestamp(),
        // Kh√¥ng c·∫≠p nh·∫≠t totalEpisodes ƒë·ªÉ gi·ªØ nguy√™n data t·ª´ detail
      });

      print('‚úÖ Episode $episodeIndex marked as watched for ${currentStatus.title}');
      print('   üìä Status: ${newStatus.displayName}');
      final progressText = totalEps != null && totalEps > 0
          ? '${updatedWatchedEpisodes.length}/$totalEps episodes'
          : '${updatedWatchedEpisodes.length}/? episodes';
      print('   üì∫ Progress: $progressText');

      return true;
    } catch (e) {
      print('‚ùå Error marking episode as watched: $e');
      return false;
    }
  }

  /// L·∫•y danh s√°ch anime theo tr·∫°ng th√°i
  Future<List<AnimeWatchStatusModel>> getAnimesByStatus(String uid, AnimeWatchStatus status) async {
    try {
      // L·∫•y t·∫•t c·∫£ anime tr∆∞·ªõc, sau ƒë√≥ filter v√† sort trong memory ƒë·ªÉ tr√°nh c·∫ßn index
      final querySnapshot = await _firestore
          .collection('users')
          .doc(uid)
          .collection('animeWatchStatus')
          .get();

      final animes = <AnimeWatchStatusModel>[];
      for (final doc in querySnapshot.docs) {
        try {
          final anime = AnimeWatchStatusModel.fromFirestore(doc);
          // Filter theo status
          if (anime.status == status) {
            animes.add(anime);
          }
        } catch (e) {
          print('‚ùå Error parsing anime watch status: $e');
        }
      }

      // Sort theo lastWatchedAt descending
      animes.sort((a, b) => b.lastWatchedAt.compareTo(a.lastWatchedAt));

      print('‚úÖ Retrieved ${animes.length} animes with status: ${status.displayName}');
      return animes;
    } catch (e) {
      print('‚ùå Error getting animes by status: $e');
      return [];
    }
  }

  /// L·∫•y t·∫•t c·∫£ anime ƒë√£ l∆∞u/xem
  Future<List<AnimeWatchStatusModel>> getAllWatchedAnimes(String uid) async {
    try {
      final querySnapshot = await _firestore
          .collection('users')
          .doc(uid)
          .collection('animeWatchStatus')
          .get();

      final animes = <AnimeWatchStatusModel>[];
      for (final doc in querySnapshot.docs) {
        try {
          animes.add(AnimeWatchStatusModel.fromFirestore(doc));
        } catch (e) {
          print('‚ùå Error parsing anime watch status: $e');
        }
      }

      // Sort theo lastWatchedAt descending
      animes.sort((a, b) => b.lastWatchedAt.compareTo(a.lastWatchedAt));

      print('‚úÖ Retrieved ${animes.length} total watched animes');
      return animes;
    } catch (e) {
      print('‚ùå Error getting all watched animes: $e');
      return [];
    }
  }

  /// X√≥a anime kh·ªèi danh s√°ch xem
  Future<bool> removeAnimeWatchStatus(String uid, int malId) async {
    try {
      await _firestore
          .collection('users')
          .doc(uid)
          .collection('animeWatchStatus')
          .doc(malId.toString())
          .delete();

      print('‚úÖ Anime watch status removed: MAL ID $malId');
      return true;
    } catch (e) {
      print('‚ùå Error removing anime watch status: $e');
      return false;
    }
  }
}
